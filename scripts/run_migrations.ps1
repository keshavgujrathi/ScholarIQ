<#
.SYNOPSIS
    Runs database migrations using Alembic.
.DESCRIPTION
    This script provides commands to manage database migrations using Alembic.
    It supports creating new migrations, upgrading/downgrading the database,
    and other common migration tasks.
#>

param (
    [Parameter(Position=0)]
    [string]$Command = "upgrade",  # Default command
    
    [string]$Revision = "head",     # Default revision
    
    [string]$Message = "",         # Message for new migrations
    
    [switch]$Autogenerate = $false,
    
    [switch]$Help = $false
)

$ErrorActionPreference = "Stop"
$projectRoot = Split-Path -Parent $PSScriptRoot
$alembicIni = Join-Path $projectRoot "alembic.ini"
$alembicDir = Join-Path $projectRoot "alembic"

# Show help if requested
if ($Help -or ($Command -eq "help")) {
    Write-Host "Usage: .\run_migrations.ps1 [Command] [Options]"
    Write-Host ""
    Write-Host "Commands:"
    Write-Host "  upgrade [revision]   Upgrade to the specified revision (default: head)"
    Write-Host "  downgrade [revision] Downgrade to the specified revision"
    Write-Host "  revision [message]   Create a new revision"
    Write-Host "  history             Show migration history"
    Write-Host "  current             Show current revision"
    Write-Host "  heads               Show available heads"
    Write-Host "  branches            Show branch points"
    Write-Host "  show [revision]     Show the revision with the given revision id"
    Write-Host "  stamp [revision]    Stamp the revision table with the given revision"
    Write-Host "  check               Check if there are any new operations to migrate"
    Write-Host "  init                Initialize a new migrations environment"
    Write-Host ""
    Write-Host "Options:"
    Write-Host "  -Message ""        Message for new revisions"
    Write-Host "  -Autogenerate      Autogenerate migration scripts"
    Write-Host "  -Help              Show this help message"
    exit 0
}

# Check if Alembic is installed
if (-not (Get-Command alembic -ErrorAction SilentlyContinue)) {
    Write-Error "Alembic is not installed. Please install it with 'pip install alembic'"
    exit 1
}

# Check if alembic.ini exists
if (-not (Test-Path $alembicIni)) {
    Write-Error "alembic.ini not found at $alembicIni"
    Write-Host "You may need to run 'alembic init alembic' first" -ForegroundColor Yellow
    exit 1
}

# Function to run Alembic commands
function Invoke-Alembic {
    param (
        [string]$Command,
        [string[]]$Arguments = @()
    )
    
    $allArgs = @("-c", $alembicIni, $Command) + $Arguments
    
    Write-Host "Running: alembic $($allArgs -join ' ')" -ForegroundColor Cyan
    & alembic $allArgs
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Alembic command failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
    }
}

try {
    # Handle different commands
    switch ($Command.ToLower()) {
        "upgrade" {
            Invoke-Alembic "upgrade" @($Revision)
        }
        
        "downgrade" {
            if (-not $Revision) {
                Write-Error "Revision is required for downgrade command"
                exit 1
            }
            Invoke-Alembic "downgrade" @($Revision)
        }
        
        "revision" {
            $revisionArgs = @()
            
            if ($Autogenerate) {
                $revisionArgs += "--autogenerate"
            }
            
            if ($Message) {
                $revisionArgs += "-m"
                $revisionArgs += $Message
            } elseif ($Autogenerate) {
                $revisionArgs += "-m"
                $revisionArgs += "autogenerated migration"
            }
            
            Invoke-Alembic "revision" $revisionArgs
        }
        
        "history" {
            Invoke-Alembic "history" @("-v")
        }
        
        "current" {
            Invoke-Alembic "current" @("-v")
        }
        
        "heads" {
            Invoke-Alembic "heads" @("-v")
        }
        
        "branches" {
            Invoke-Alembic "branches" @("-v")
        }
        
        "show" {
            if (-not $Revision) {
                Write-Error "Revision is required for show command"
                exit 1
            }
            Invoke-Alembic "show" @($Revision)
        }
        
        "stamp" {
            if (-not $Revision) {
                Write-Error "Revision is required for stamp command"
                exit 1
            }
            Invoke-Alembic "stamp" @($Revision)
        }
        
        "check" {
            Invoke-Alembic "check"
        }
        
        "init" {
            if (Test-Path $alembicDir) {
                Write-Error "Alembic directory already exists at $alembicDir"
                exit 1
            }
            
            Write-Host "Initializing new Alembic environment in $alembicDir" -ForegroundColor Cyan
            alembic init $alembicDir
            
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to initialize Alembic environment"
                exit $LASTEXITCODE
            }
            
            Write-Host "Alembic environment initialized successfully" -ForegroundColor Green
            Write-Host "Don't forget to update the sqlalchemy.url in alembic.ini" -ForegroundColor Yellow
        }
        
        default {
            Write-Error "Unknown command: $Command"
            Write-Host "Use -Help to see available commands" -ForegroundColor Yellow
            exit 1
        }
    }
} catch {
    Write-Error "Error running migrations: $_"
    exit 1
}
