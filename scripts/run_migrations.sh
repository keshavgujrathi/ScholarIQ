#!/bin/bash

# Exit on error
set -e

# Default configuration
COMMAND="upgrade"  # Default command
REVISION="head"     # Default revision
MESSAGE=""          # Message for new migrations
AUTOGENERATE=false
PROJECT_ROOT=$(cd "$(dirname "$0")/.." && pwd)
ALEMBIC_INI="$PROJECT_ROOT/alembic.ini"
ALEMBIC_DIR="$PROJECT_ROOT/alembic"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--command)
            COMMAND="$2"
            shift 2
            ;;
        -r|--revision)
            REVISION="$2"
            shift 2
            ;;
        -m|--message)
            MESSAGE="$2"
            shift 2
            ;;
        --autogenerate)
            AUTOGENERATE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            # Handle positional arguments
            if [[ -z "$COMMAND" || "$COMMAND" == "upgrade" ]]; then
                COMMAND="$1"
            elif [[ -z "$REVISION" ]]; then
                REVISION="$1"
            fi
            shift
            ;;
    esac
done

# Show help message
function show_help {
    echo "Usage: $0 [command] [options]"
    echo ""
    echo "Commands:"
    echo "  upgrade [revision]   Upgrade to the specified revision (default: head)"
    echo "  downgrade [revision] Downgrade to the specified revision"
    echo "  revision [message]   Create a new revision"
    echo "  history             Show migration history"
    echo "  current             Show current revision"
    echo "  heads               Show available heads"
    echo "  branches            Show branch points"
    echo "  show [revision]     Show the revision with the given revision id"
    echo "  stamp [revision]    Stamp the revision table with the given revision"
    echo "  check               Check if there are any new operations to migrate"
    echo "  init                Initialize a new migrations environment"
    echo ""
    echo "Options:"
    echo "  -c, --command CMD    Command to run (default: upgrade)"
    echo "  -r, --revision REV   Revision to use (default: head)"
    echo "  -m, --message MSG    Message for new revisions"
    echo "  --autogenerate       Autogenerate migration scripts"
    echo "  -h, --help          Show this help message"
}

# Check if Alembic is installed
if ! command -v alembic &> /dev/null; then
    echo -e "${YELLOW}Alembic is not installed. Please install it with 'pip install alembic'${NC}"
    exit 1
fi

# Check if alembic.ini exists
if [ ! -f "$ALEMBIC_INI" ]; then
    echo -e "${YELLOW}alembic.ini not found at $ALEMBIC_INI${NC}"
    echo -e "${YELLOW}You may need to run 'alembic init alembic' first${NC}"
    exit 1
fi

# Function to run Alembic commands
function run_alembic {
    local cmd=$1
    shift
    local args=("$@")
    
    echo -e "${CYAN}Running: alembic $cmd ${args[*]}${NC}"
    alembic -c "$ALEMBIC_INI" "$cmd" "${args[@]}"
    
    if [ $? -ne 0 ]; then
        echo -e "${YELLOW}Alembic command failed with exit code $?${NC}"
        exit 1
    fi
}

# Handle different commands
case $COMMAND in
    upgrade)
        run_alembic upgrade "$REVISION"
        ;;
        
    downgrade)
        if [ -z "$REVISION" ]; then
            echo -e "${YELLOW}Revision is required for downgrade command${NC}"
            exit 1
        fi
        run_alembic downgrade "$REVISION"
        ;;
        
    revision)
        local revision_args=()
        
        if [ "$AUTOGENERATE" = true ]; then
            revision_args+=("--autogenerate")
        fi
        
        if [ -n "$MESSAGE" ]; then
            revision_args+=(-m "$MESSAGE")
        elif [ "$AUTOGENERATE" = true ]; then
            revision_args+=(-m "autogenerated migration")
        fi
        
        run_alembic revision "${revision_args[@]}"
        ;;
        
    history)
        run_alembic history -v
        ;;
        
    current)
        run_alembic current -v
        ;;
        
    heads)
        run_alembic heads -v
        ;;
        
    branches)
        run_alembic branches -v
        ;;
        
    show)
        if [ -z "$REVISION" ]; then
            echo -e "${YELLOW}Revision is required for show command${NC}"
            exit 1
        fi
        run_alembic show "$REVISION"
        ;;
        
    stamp)
        if [ -z "$REVISION" ]; then
            echo -e "${YELLOW}Revision is required for stamp command${NC}"
            exit 1
        fi
        run_alembic stamp "$REVISION"
        ;;
        
    check)
        run_alembic check
        ;;
        
    init)
        if [ -d "$ALEMBIC_DIR" ]; then
            echo -e "${YELLOW}Alembic directory already exists at $ALEMBIC_DIR${NC}"
            exit 1
        fi
        
        echo -e "${CYAN}Initializing new Alembic environment in $ALEMBIC_DIR${NC}"
        alembic init "$ALEMBIC_DIR"
        
        if [ $? -ne 0 ]; then
            echo -e "${YELLOW}Failed to initialize Alembic environment${NC}"
            exit 1
        fi
        
        echo -e "${GREEN}Alembic environment initialized successfully${NC}"
        echo -e "${YELLOW}Don't forget to update the sqlalchemy.url in alembic.ini${NC}"
        ;;
        
    *)
        echo -e "${YELLOW}Unknown command: $COMMAND${NC}"
        show_help
        exit 1
        ;;
esac

exit 0
